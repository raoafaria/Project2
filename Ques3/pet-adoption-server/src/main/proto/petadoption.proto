syntax = "proto3";

option java_package = "com.petadoption";
option java_outer_classname = "PetAdoptionProto";
option objc_class_prefix = "PA";
option java_multiple_files = true;


package petadoptionserver;


// gRPC service definition for Pet Adoption System
service PetAdoptionService {
    // Register a new pet
    rpc RegisterPet(RegisterPetRequest) returns (RegisterPetResponse);

    // Search for a pet by one or more key details
    rpc SearchPet(SearchPetRequest) returns (SearchPetResponse);

    // Fetch a paginated list of search results (in case of large datasets)
    rpc ListPets(ListPetsRequest) returns (stream ListPetsResponse);

    // Update details of an existing pet
    rpc UpdatePetDetails(UpdatePetRequest) returns (UpdatePetResponse);

    // Delete a pet by its unique ID
    rpc DeletePet(DeletePetRequest) returns (DeletePetResponse);

    // Get detailed information of a specific pet by its unique ID
    rpc GetPetDetails(GetPetRequest) returns (GetPetResponse);
}

// Message to register a new pet
message RegisterPetRequest {
    string name = 1;        // Required: Name of the pet (must be non-empty)
    string gender = 2;      // Required: Gender of the pet (Male/Female)
    int32 age = 3;          // Required: Age of the pet (must be >= 0)
    string breed = 4;       // Required: Breed of the pet (must be non-empty)
    bytes picture = 5;      // Required: Picture of the pet (binary data)
}

// Response message for registering a new pet
message RegisterPetResponse {
    string message = 1;     // Response message (e.g., "Pet registered successfully")
    bool success = 2;       // Whether the operation was successful
    int32 pet_id = 3;       // Unique ID for the registered pet
}

// Message for updating an existing pet's details
message UpdatePetRequest {
    string pet_id = 1;       // Required: Unique ID of the pet to update
    string name = 2;        // Optional: New name of the pet
    string gender = 3;      // Optional: New gender of the pet (Male/Female)
    int32 age = 4;          // Optional: New age of the pet (must be >= 0)
    string breed = 5;       // Optional: New breed of the pet
    bytes picture = 6;      // Optional: New picture of the pet (binary data)
}

// Response message for updating pet details
message UpdatePetResponse {
    string message = 1;     // Response message (e.g., "Pet updated successfully")
    bool success = 2;       // Whether the operation was successful
}

// Message to delete a pet by its unique ID
message DeletePetRequest {
    string pet_id = 1;       // Required: Unique ID of the pet to delete
}

// Response message for deleting a pet
message DeletePetResponse {
    string message = 1;     // Response message (e.g., "Pet deleted successfully")
    bool success = 2;       // Whether the deletion was successful
}

// Message for searching a pet by one or more key details
message SearchPetRequest {
    string name = 1;        // Optional: Search by name
    string gender = 2;      // Optional: Search by gender (Male/Female)
    int32 age = 3;          // Optional: Search by age (must be >= 0)
    string breed = 4;       // Optional: Search by breed
}

// Response message for search results
message SearchPetResponse {
    repeated Pet pets = 1;  // A list of matching pets (may return multiple results)
    string message = 2;     // Response message (e.g., "X pets found")
}

// Message for listing pets with pagination support
message ListPetsRequest {
    int32 page_number = 1;  // Page number for pagination
    int32 page_size = 2;    // Number of pets per page
}

// Response message for each page of pets in the system
message ListPetsResponse {
    repeated Pet pets = 1;  // A list of pets on the current page
    int32 total_pages = 2;  // Total number of pages available
}

// Message to get a specific pet's details by its unique ID
message GetPetRequest {
    string pet_id = 1;       // Required: Unique ID of the pet
}

// Response message for retrieving detailed information of a specific pet
message GetPetResponse {
    Pet pet = 1;            // The complete pet object with all its details
    string message = 2;
}

// Define the structure of a pet (used in responses)
message Pet {
    string pet_id = 1;       // Unique ID of the pet
    string name = 2;        // Name of the pet
    string gender = 3;      // Gender of the pet
    int32 age = 4;          // Age of the pet
    string breed = 5;       // Breed of the pet
    bytes picture = 6;      // Picture of the pet (binary data)
}